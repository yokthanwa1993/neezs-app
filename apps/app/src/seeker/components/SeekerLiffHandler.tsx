import React, { useEffect, useState, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSeekerLiff } from '../contexts/SeekerLiffContext';
import { useSeekerAuth } from '../contexts/SeekerAuthContext';
import { signInWithCustomToken } from 'firebase/auth';
import { auth } from '@/shared/lib/firebase';

interface SeekerLiffHandlerProps {
  targetPath?: string;
}

const SeekerLiffHandler: React.FC<SeekerLiffHandlerProps> = ({ 
  targetPath = '/seeker/home' 
}) => {
  const navigate = useNavigate();
  const { 
    initializeLiff, 
    isLiffReady, 
    isLiffLoading, 
    isInLiffBrowser, 
    isLiffLoggedIn, 
    getLiffToken, 
    getLiffProfile,
    forceLiffReload,
    liffError
  } = useSeekerLiff();
  const { user } = useSeekerAuth();
  const [isAuthenticating, setIsAuthenticating] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // ‡∏ñ‡πâ‡∏≤ user login ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ redirect ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  useEffect(() => {
    if (user) {
      console.log('‚úÖ SeekerLiffHandler: User already authenticated, redirecting');
      navigate(targetPath, { replace: true });
    }
  }, [user, navigate, targetPath]);

  // ‡πÄ‡∏£‡∏¥‡πà‡∏° LIFF authentication process
  useEffect(() => {
    const handleLiffAuthentication = async () => {
      if (isAuthenticating || user) return;

      // ‡∏ñ‡πâ‡∏≤ LIFF error ‡πÉ‡∏´‡πâ redirect ‡πÑ‡∏õ normal login
      if (liffError && !isLiffLoading) {
        console.log('‚ö†Ô∏è SeekerLiffHandler: LIFF failed, redirecting to normal login');
        setTimeout(() => {
          navigate('/seeker/login', { replace: true });
        }, 3000); // ‡∏£‡∏≠ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ user ‡πÄ‡∏´‡πá‡∏ô error
        return;
      }

      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ LIFF ‡∏û‡∏£‡πâ‡∏≠‡∏°
      if (!isLiffReady) {
        if (!isLiffLoading && !liffError) {
          console.log('üîÑ SeekerLiffHandler: Initializing LIFF');
          try {
            await initializeLiff();
          } catch (error) {
            console.error('‚ùå SeekerLiffHandler: LIFF init failed', error);
            setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö LINE ‡πÑ‡∏î‡πâ');
            return;
          }
        }
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô LIFF browser ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!isInLiffBrowser()) {
        console.log('‚ö†Ô∏è SeekerLiffHandler: Not in LIFF browser, redirecting to web login');
        navigate('/seeker/login', { replace: true });
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ login ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!isLiffLoggedIn()) {
        console.log('‚ö†Ô∏è SeekerLiffHandler: Not logged in to LIFF');
        setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö LINE ‡∏Å‡πà‡∏≠‡∏ô');
        return;
      }

      // ‡πÄ‡∏£‡∏¥‡πà‡∏° authentication
      setIsAuthenticating(true);
      console.log('üîÑ SeekerLiffHandler: Starting LIFF authentication');

      try {
        // ‡∏î‡∏∂‡∏á LIFF token ‡πÅ‡∏•‡∏∞ profile
        const [liffToken, profile] = await Promise.all([
          getLiffToken(),
          getLiffProfile()
        ]);

        if (!liffToken || !profile) {
          throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LINE ‡πÑ‡∏î‡πâ');
        }

        console.log('‚úÖ SeekerLiffHandler: LIFF data obtained', profile.displayName);

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ backend ‡πÄ‡∏û‡∏∑‡πà‡∏≠ verify ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Firebase token
        const response = await fetch('/api/auth/line', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            idToken: liffToken, // ‡πÉ‡∏ä‡πâ liffToken ‡πÄ‡∏õ‡πá‡∏ô idToken
            profile,
            role: 'seeker'
          }),
        });

        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          throw new Error(errorData.message || '‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
        }

        const { firebaseToken } = await response.json();

        if (!firebaseToken) {
          throw new Error('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö token ‡∏à‡∏≤‡∏Å server');
        }

        // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Firebase ‡∏î‡πâ‡∏ß‡∏¢ custom token
        console.log('üîÑ SeekerLiffHandler: Signing in to Firebase');
        const userCredential = await signInWithCustomToken(auth, firebaseToken);
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á seeker user object
        const seekerUser = {
          ...userCredential.user,
          role: 'seeker' as const,
          profile: {
            lineUserId: profile.userId,
            displayName: profile.displayName,
            pictureUrl: profile.pictureUrl,
            statusMessage: profile.statusMessage
          }
        };

        console.log('‚úÖ SeekerLiffHandler: Firebase authentication successful');
        // User state will be updated automatically by Firebase auth state listener

        // Navigation ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô useEffect ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô

      } catch (error) {
        console.error('‚ùå SeekerLiffHandler: Authentication failed', error);
        setError(error instanceof Error ? error.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
      } finally {
        setIsAuthenticating(false);
      }
    };

    handleLiffAuthentication();
  }, [
    isLiffReady, 
    isLiffLoading, 
    isInLiffBrowser, 
    isLiffLoggedIn, 
    isAuthenticating, 
    user,
    liffError,
    initializeLiff,
    getLiffToken,
    getLiffProfile,
    navigate
  ]);

  const handleRetry = () => {
    setError(null);
    setIsAuthenticating(false);
    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤
    window.location.reload();
  };

  const handleBackToLogin = () => {
    navigate('/seeker/login', { replace: true });
  };

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-red-50 to-pink-100">
        <div className="bg-white p-4 rounded-2xl shadow-xl w-full max-w-mobile-lg text-center">
          <div className="text-red-500 text-4xl mb-4">‚ö†Ô∏è</div>
          <h2 className="text-xl font-bold text-gray-900 mb-4">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h2>
          <p className="text-gray-600 mb-6">{error}</p>
          
          <div className="space-y-3">
            <button
              onClick={forceLiffReload}
              className="w-full bg-yellow-500 hover:bg-yellow-600 text-white font-semibold py-3 px-4 rounded-lg transition duration-200"
            >
              üîÑ ‡∏•‡πâ‡∏≤‡∏á Cache ‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            </button>
            <button
              onClick={handleRetry}
              className="w-full bg-blue-500 hover:bg-blue-600 text-white font-semibold py-3 px-4 rounded-lg transition duration-200"
            >
              ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            </button>
            <button
              onClick={handleBackToLogin}
              className="w-full bg-gray-500 hover:bg-gray-600 text-white font-semibold py-3 px-4 rounded-lg transition duration-200"
            >
              ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Login
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="bg-white p-4 rounded-2xl shadow-xl w-full max-w-mobile-lg text-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-6"></div>
        
        <h2 className="text-xl font-bold text-gray-900 mb-2">
          ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
        </h2>
        
        <div className="space-y-2 text-sm text-gray-600">
          {isLiffLoading && <p>üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î LINE... (retry ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)</p>}
          {liffError && <p className="text-red-600">‚ùå {liffError}</p>}
          {liffError && <p className="text-blue-600">üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login ‡∏õ‡∏Å‡∏ï‡∏¥...</p>}
          {isLiffReady && !isAuthenticating && <p>‚úÖ LINE ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß</p>}
          {isAuthenticating && <p>üîê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô...</p>}
        </div>
      </div>
    </div>
  );
};

export default SeekerLiffHandler;
